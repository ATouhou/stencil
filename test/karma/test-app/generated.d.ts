/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import { JSXElements } from '@stencil/core';





interface AttributeBasicRoot {}
interface AttributeBasicRootAttributes extends JSXElements.HTMLAttributes {}

interface AttributeBasic {
  'customAttr': string;
  'multiWord': string;
  'single': string;
}
interface AttributeBasicAttributes extends JSXElements.HTMLAttributes {
  'customAttr'?: string;
  'multiWord'?: string;
  'single'?: string;
}

interface AttributeBooleanRoot {
  'toggleState': () => void;
}
interface AttributeBooleanRootAttributes extends JSXElements.HTMLAttributes {}

interface AttributeBoolean {
  'boolState': boolean;
  'noreflect': boolean;
  'strState': string;
}
interface AttributeBooleanAttributes extends JSXElements.HTMLAttributes {
  'boolState'?: boolean;
  'noreflect'?: boolean;
  'strState'?: string;
}

interface AttributeComplex {
  'bool0': boolean;
  'bool1': boolean;
  'bool2': boolean;
  'getInstance': () => this;
  'nu0': number;
  'nu1': number;
  'str0': string;
  'str1': string;
}
interface AttributeComplexAttributes extends JSXElements.HTMLAttributes {
  'bool0'?: boolean;
  'bool1'?: boolean;
  'bool2'?: boolean;
  'nu0'?: number;
  'nu1'?: number;
  'str0'?: string;
  'str1'?: string;
}

interface AttributeHost {}
interface AttributeHostAttributes extends JSXElements.HTMLAttributes {}

interface ConditionalBasic {}
interface ConditionalBasicAttributes extends JSXElements.HTMLAttributes {}

interface ConditionalRerenderRoot {}
interface ConditionalRerenderRootAttributes extends JSXElements.HTMLAttributes {}

interface ConditionalRerender {}
interface ConditionalRerenderAttributes extends JSXElements.HTMLAttributes {}

interface CssVariablesRoot {}
interface CssVariablesRootAttributes extends JSXElements.HTMLAttributes {}

interface CssVariables {}
interface CssVariablesAttributes extends JSXElements.HTMLAttributes {}

interface DynamicImport {
  'update': () => Promise<void>;
}
interface DynamicImportAttributes extends JSXElements.HTMLAttributes {}

interface EsmImport {
  'propVal': number;
  'someMethod': () => void;
}
interface EsmImportAttributes extends JSXElements.HTMLAttributes {
  'onSomeEvent'?: (event: CustomEvent) => void;
  'propVal'?: number;
}

interface InitCssRoot {}
interface InitCssRootAttributes extends JSXElements.HTMLAttributes {}

interface KeyReorderRoot {}
interface KeyReorderRootAttributes extends JSXElements.HTMLAttributes {}

interface KeyReorder {
  'num': number;
}
interface KeyReorderAttributes extends JSXElements.HTMLAttributes {
  'num'?: number;
}

interface LifecycleBasicA {}
interface LifecycleBasicAAttributes extends JSXElements.HTMLAttributes {}

interface LifecycleBasicB {
  'value': string;
}
interface LifecycleBasicBAttributes extends JSXElements.HTMLAttributes {
  'onLifecycleLoad'?: (event: CustomEvent) => void;
  'onLifecycleUpdate'?: (event: CustomEvent) => void;
  'value'?: string;
}

interface LifecycleBasicC {
  'value': string;
}
interface LifecycleBasicCAttributes extends JSXElements.HTMLAttributes {
  'onLifecycleLoad'?: (event: CustomEvent) => void;
  'onLifecycleUpdate'?: (event: CustomEvent) => void;
  'value'?: string;
}

interface LifecycleUnloadA {}
interface LifecycleUnloadAAttributes extends JSXElements.HTMLAttributes {}

interface LifecycleUnloadB {}
interface LifecycleUnloadBAttributes extends JSXElements.HTMLAttributes {}

interface LifecycleUnloadRoot {}
interface LifecycleUnloadRootAttributes extends JSXElements.HTMLAttributes {}

interface ReflectToAttr {
  'bool': boolean;
  'dynamicNu': number;
  'dynamicStr': string;
  'nu': number;
  'null': string;
  'otherBool': boolean;
  'str': string;
  'undef': string;
}
interface ReflectToAttrAttributes extends JSXElements.HTMLAttributes {
  'bool'?: boolean;
  'dynamicNu'?: number;
  'dynamicStr'?: string;
  'nu'?: number;
  'null'?: string;
  'otherBool'?: boolean;
  'str'?: string;
  'undef'?: string;
}

interface ShadowDomArrayRoot {}
interface ShadowDomArrayRootAttributes extends JSXElements.HTMLAttributes {}

interface ShadowDomArray {
  'values': number[];
}
interface ShadowDomArrayAttributes extends JSXElements.HTMLAttributes {
  'values'?: number[];
}

interface ShadowDomBasicRoot {}
interface ShadowDomBasicRootAttributes extends JSXElements.HTMLAttributes {}

interface ShadowDomBasic {}
interface ShadowDomBasicAttributes extends JSXElements.HTMLAttributes {}

interface ShadowDomSlotBasic {}
interface ShadowDomSlotBasicAttributes extends JSXElements.HTMLAttributes {}

interface ShadowDomSlotNestedRoot {}
interface ShadowDomSlotNestedRootAttributes extends JSXElements.HTMLAttributes {}

interface ShadowDomSlotNested {
  'i': number;
}
interface ShadowDomSlotNestedAttributes extends JSXElements.HTMLAttributes {
  'i'?: number;
}

interface SlotArrayBasic {}
interface SlotArrayBasicAttributes extends JSXElements.HTMLAttributes {}

interface SlotArrayComplexRoot {}
interface SlotArrayComplexRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotArrayComplex {}
interface SlotArrayComplexAttributes extends JSXElements.HTMLAttributes {}

interface SlotArrayTop {}
interface SlotArrayTopAttributes extends JSXElements.HTMLAttributes {}

interface SlotBasicOrderRoot {}
interface SlotBasicOrderRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotBasicOrder {}
interface SlotBasicOrderAttributes extends JSXElements.HTMLAttributes {}

interface SlotBasicRoot {}
interface SlotBasicRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotBasic {}
interface SlotBasicAttributes extends JSXElements.HTMLAttributes {}

interface SlotDynamicWrapperRoot {}
interface SlotDynamicWrapperRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotDynamicWrapper {
  'tag': string;
}
interface SlotDynamicWrapperAttributes extends JSXElements.HTMLAttributes {
  'tag'?: string;
}

interface SlotFallbackRoot {}
interface SlotFallbackRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotFallback {
  'inc': number;
}
interface SlotFallbackAttributes extends JSXElements.HTMLAttributes {
  'inc'?: number;
}

interface SlotHtml {
  'inc': number;
}
interface SlotHtmlAttributes extends JSXElements.HTMLAttributes {
  'inc'?: number;
}

interface SlotLightDomRoot {}
interface SlotLightDomRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotLightDomContent {}
interface SlotLightDomContentAttributes extends JSXElements.HTMLAttributes {}

interface SlotMapOrderRoot {}
interface SlotMapOrderRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotMapOrder {}
interface SlotMapOrderAttributes extends JSXElements.HTMLAttributes {}

interface SlotReorderRoot {}
interface SlotReorderRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotReorder {
  'reordered': boolean;
}
interface SlotReorderAttributes extends JSXElements.HTMLAttributes {
  'reordered'?: boolean;
}

interface SlotReplaceWrapperRoot {}
interface SlotReplaceWrapperRootAttributes extends JSXElements.HTMLAttributes {}

interface SlotReplaceWrapper {
  'href': string;
}
interface SlotReplaceWrapperAttributes extends JSXElements.HTMLAttributes {
  'href'?: string;
}

interface CssCmp {}
interface CssCmpAttributes extends JSXElements.HTMLAttributes {}

interface SassCmp {}
interface SassCmpAttributes extends JSXElements.HTMLAttributes {}

interface SvgAttr {}
interface SvgAttrAttributes extends JSXElements.HTMLAttributes {}

interface SvgClass {}
interface SvgClassAttributes extends JSXElements.HTMLAttributes {}

interface Tag3dComponent {}
interface Tag3dComponentAttributes extends JSXElements.HTMLAttributes {}

interface Tag88 {}
interface Tag88Attributes extends JSXElements.HTMLAttributes {}

export interface LocalElementInterfaces  {
  'AttributeBasicRoot': AttributeBasicRoot;
  'AttributeBasic': AttributeBasic;
  'AttributeBooleanRoot': AttributeBooleanRoot;
  'AttributeBoolean': AttributeBoolean;
  'AttributeComplex': AttributeComplex;
  'AttributeHost': AttributeHost;
  'ConditionalBasic': ConditionalBasic;
  'ConditionalRerenderRoot': ConditionalRerenderRoot;
  'ConditionalRerender': ConditionalRerender;
  'CssVariablesRoot': CssVariablesRoot;
  'CssVariables': CssVariables;
  'DynamicImport': DynamicImport;
  'EsmImport': EsmImport;
  'InitCssRoot': InitCssRoot;
  'KeyReorderRoot': KeyReorderRoot;
  'KeyReorder': KeyReorder;
  'LifecycleBasicA': LifecycleBasicA;
  'LifecycleBasicB': LifecycleBasicB;
  'LifecycleBasicC': LifecycleBasicC;
  'LifecycleUnloadA': LifecycleUnloadA;
  'LifecycleUnloadB': LifecycleUnloadB;
  'LifecycleUnloadRoot': LifecycleUnloadRoot;
  'ReflectToAttr': ReflectToAttr;
  'ShadowDomArrayRoot': ShadowDomArrayRoot;
  'ShadowDomArray': ShadowDomArray;
  'ShadowDomBasicRoot': ShadowDomBasicRoot;
  'ShadowDomBasic': ShadowDomBasic;
  'ShadowDomSlotBasic': ShadowDomSlotBasic;
  'ShadowDomSlotNestedRoot': ShadowDomSlotNestedRoot;
  'ShadowDomSlotNested': ShadowDomSlotNested;
  'SlotArrayBasic': SlotArrayBasic;
  'SlotArrayComplexRoot': SlotArrayComplexRoot;
  'SlotArrayComplex': SlotArrayComplex;
  'SlotArrayTop': SlotArrayTop;
  'SlotBasicOrderRoot': SlotBasicOrderRoot;
  'SlotBasicOrder': SlotBasicOrder;
  'SlotBasicRoot': SlotBasicRoot;
  'SlotBasic': SlotBasic;
  'SlotDynamicWrapperRoot': SlotDynamicWrapperRoot;
  'SlotDynamicWrapper': SlotDynamicWrapper;
  'SlotFallbackRoot': SlotFallbackRoot;
  'SlotFallback': SlotFallback;
  'SlotHtml': SlotHtml;
  'SlotLightDomRoot': SlotLightDomRoot;
  'SlotLightDomContent': SlotLightDomContent;
  'SlotMapOrderRoot': SlotMapOrderRoot;
  'SlotMapOrder': SlotMapOrder;
  'SlotReorderRoot': SlotReorderRoot;
  'SlotReorder': SlotReorder;
  'SlotReplaceWrapperRoot': SlotReplaceWrapperRoot;
  'SlotReplaceWrapper': SlotReplaceWrapper;
  'CssCmp': CssCmp;
  'SassCmp': SassCmp;
  'SvgAttr': SvgAttr;
  'SvgClass': SvgClass;
  'Tag3dComponent': Tag3dComponent;
  'Tag88': Tag88;
}

export interface LocalIntrinsicElements {
  'attribute-basic-root': AttributeBasicRootAttributes;
  'attribute-basic': AttributeBasicAttributes;
  'attribute-boolean-root': AttributeBooleanRootAttributes;
  'attribute-boolean': AttributeBooleanAttributes;
  'attribute-complex': AttributeComplexAttributes;
  'attribute-host': AttributeHostAttributes;
  'conditional-basic': ConditionalBasicAttributes;
  'conditional-rerender-root': ConditionalRerenderRootAttributes;
  'conditional-rerender': ConditionalRerenderAttributes;
  'css-variables-root': CssVariablesRootAttributes;
  'css-variables': CssVariablesAttributes;
  'dynamic-import': DynamicImportAttributes;
  'esm-import': EsmImportAttributes;
  'init-css-root': InitCssRootAttributes;
  'key-reorder-root': KeyReorderRootAttributes;
  'key-reorder': KeyReorderAttributes;
  'lifecycle-basic-a': LifecycleBasicAAttributes;
  'lifecycle-basic-b': LifecycleBasicBAttributes;
  'lifecycle-basic-c': LifecycleBasicCAttributes;
  'lifecycle-unload-a': LifecycleUnloadAAttributes;
  'lifecycle-unload-b': LifecycleUnloadBAttributes;
  'lifecycle-unload-root': LifecycleUnloadRootAttributes;
  'reflect-to-attr': ReflectToAttrAttributes;
  'shadow-dom-array-root': ShadowDomArrayRootAttributes;
  'shadow-dom-array': ShadowDomArrayAttributes;
  'shadow-dom-basic-root': ShadowDomBasicRootAttributes;
  'shadow-dom-basic': ShadowDomBasicAttributes;
  'shadow-dom-slot-basic': ShadowDomSlotBasicAttributes;
  'shadow-dom-slot-nested-root': ShadowDomSlotNestedRootAttributes;
  'shadow-dom-slot-nested': ShadowDomSlotNestedAttributes;
  'slot-array-basic': SlotArrayBasicAttributes;
  'slot-array-complex-root': SlotArrayComplexRootAttributes;
  'slot-array-complex': SlotArrayComplexAttributes;
  'slot-array-top': SlotArrayTopAttributes;
  'slot-basic-order-root': SlotBasicOrderRootAttributes;
  'slot-basic-order': SlotBasicOrderAttributes;
  'slot-basic-root': SlotBasicRootAttributes;
  'slot-basic': SlotBasicAttributes;
  'slot-dynamic-wrapper-root': SlotDynamicWrapperRootAttributes;
  'slot-dynamic-wrapper': SlotDynamicWrapperAttributes;
  'slot-fallback-root': SlotFallbackRootAttributes;
  'slot-fallback': SlotFallbackAttributes;
  'slot-html': SlotHtmlAttributes;
  'slot-light-dom-root': SlotLightDomRootAttributes;
  'slot-light-dom-content': SlotLightDomContentAttributes;
  'slot-map-order-root': SlotMapOrderRootAttributes;
  'slot-map-order': SlotMapOrderAttributes;
  'slot-reorder-root': SlotReorderRootAttributes;
  'slot-reorder': SlotReorderAttributes;
  'slot-replace-wrapper-root': SlotReplaceWrapperRootAttributes;
  'slot-replace-wrapper': SlotReplaceWrapperAttributes;
  'css-cmp': CssCmpAttributes;
  'sass-cmp': SassCmpAttributes;
  'svg-attr': SvgAttrAttributes;
  'svg-class': SvgClassAttributes;
  'tag-3d-component': Tag3dComponentAttributes;
  'tag-88': Tag88Attributes;
}

declare global {

  interface HTMLAttributeBasicRootElement extends AttributeBasicRoot, HTMLStencilElement {}
  var HTMLAttributeBasicRootElement: {
    prototype: HTMLAttributeBasicRootElement;
    new (): HTMLAttributeBasicRootElement;
  };

  interface HTMLAttributeBasicElement extends AttributeBasic, HTMLStencilElement {}
  var HTMLAttributeBasicElement: {
    prototype: HTMLAttributeBasicElement;
    new (): HTMLAttributeBasicElement;
  };

  interface HTMLAttributeBooleanRootElement extends AttributeBooleanRoot, HTMLStencilElement {}
  var HTMLAttributeBooleanRootElement: {
    prototype: HTMLAttributeBooleanRootElement;
    new (): HTMLAttributeBooleanRootElement;
  };

  interface HTMLAttributeBooleanElement extends AttributeBoolean, HTMLStencilElement {}
  var HTMLAttributeBooleanElement: {
    prototype: HTMLAttributeBooleanElement;
    new (): HTMLAttributeBooleanElement;
  };

  interface HTMLAttributeComplexElement extends AttributeComplex, HTMLStencilElement {}
  var HTMLAttributeComplexElement: {
    prototype: HTMLAttributeComplexElement;
    new (): HTMLAttributeComplexElement;
  };

  interface HTMLAttributeHostElement extends AttributeHost, HTMLStencilElement {}
  var HTMLAttributeHostElement: {
    prototype: HTMLAttributeHostElement;
    new (): HTMLAttributeHostElement;
  };

  interface HTMLConditionalBasicElement extends ConditionalBasic, HTMLStencilElement {}
  var HTMLConditionalBasicElement: {
    prototype: HTMLConditionalBasicElement;
    new (): HTMLConditionalBasicElement;
  };

  interface HTMLConditionalRerenderRootElement extends ConditionalRerenderRoot, HTMLStencilElement {}
  var HTMLConditionalRerenderRootElement: {
    prototype: HTMLConditionalRerenderRootElement;
    new (): HTMLConditionalRerenderRootElement;
  };

  interface HTMLConditionalRerenderElement extends ConditionalRerender, HTMLStencilElement {}
  var HTMLConditionalRerenderElement: {
    prototype: HTMLConditionalRerenderElement;
    new (): HTMLConditionalRerenderElement;
  };

  interface HTMLCssVariablesRootElement extends CssVariablesRoot, HTMLStencilElement {}
  var HTMLCssVariablesRootElement: {
    prototype: HTMLCssVariablesRootElement;
    new (): HTMLCssVariablesRootElement;
  };

  interface HTMLCssVariablesElement extends CssVariables, HTMLStencilElement {}
  var HTMLCssVariablesElement: {
    prototype: HTMLCssVariablesElement;
    new (): HTMLCssVariablesElement;
  };

  interface HTMLDynamicImportElement extends DynamicImport, HTMLStencilElement {}
  var HTMLDynamicImportElement: {
    prototype: HTMLDynamicImportElement;
    new (): HTMLDynamicImportElement;
  };

  interface HTMLEsmImportElement extends EsmImport, HTMLStencilElement {}
  var HTMLEsmImportElement: {
    prototype: HTMLEsmImportElement;
    new (): HTMLEsmImportElement;
  };

  interface HTMLInitCssRootElement extends InitCssRoot, HTMLStencilElement {}
  var HTMLInitCssRootElement: {
    prototype: HTMLInitCssRootElement;
    new (): HTMLInitCssRootElement;
  };

  interface HTMLKeyReorderRootElement extends KeyReorderRoot, HTMLStencilElement {}
  var HTMLKeyReorderRootElement: {
    prototype: HTMLKeyReorderRootElement;
    new (): HTMLKeyReorderRootElement;
  };

  interface HTMLKeyReorderElement extends KeyReorder, HTMLStencilElement {}
  var HTMLKeyReorderElement: {
    prototype: HTMLKeyReorderElement;
    new (): HTMLKeyReorderElement;
  };

  interface HTMLLifecycleBasicAElement extends LifecycleBasicA, HTMLStencilElement {}
  var HTMLLifecycleBasicAElement: {
    prototype: HTMLLifecycleBasicAElement;
    new (): HTMLLifecycleBasicAElement;
  };

  interface HTMLLifecycleBasicBElement extends LifecycleBasicB, HTMLStencilElement {}
  var HTMLLifecycleBasicBElement: {
    prototype: HTMLLifecycleBasicBElement;
    new (): HTMLLifecycleBasicBElement;
  };

  interface HTMLLifecycleBasicCElement extends LifecycleBasicC, HTMLStencilElement {}
  var HTMLLifecycleBasicCElement: {
    prototype: HTMLLifecycleBasicCElement;
    new (): HTMLLifecycleBasicCElement;
  };

  interface HTMLLifecycleUnloadAElement extends LifecycleUnloadA, HTMLStencilElement {}
  var HTMLLifecycleUnloadAElement: {
    prototype: HTMLLifecycleUnloadAElement;
    new (): HTMLLifecycleUnloadAElement;
  };

  interface HTMLLifecycleUnloadBElement extends LifecycleUnloadB, HTMLStencilElement {}
  var HTMLLifecycleUnloadBElement: {
    prototype: HTMLLifecycleUnloadBElement;
    new (): HTMLLifecycleUnloadBElement;
  };

  interface HTMLLifecycleUnloadRootElement extends LifecycleUnloadRoot, HTMLStencilElement {}
  var HTMLLifecycleUnloadRootElement: {
    prototype: HTMLLifecycleUnloadRootElement;
    new (): HTMLLifecycleUnloadRootElement;
  };

  interface HTMLReflectToAttrElement extends ReflectToAttr, HTMLStencilElement {}
  var HTMLReflectToAttrElement: {
    prototype: HTMLReflectToAttrElement;
    new (): HTMLReflectToAttrElement;
  };

  interface HTMLShadowDomArrayRootElement extends ShadowDomArrayRoot, HTMLStencilElement {}
  var HTMLShadowDomArrayRootElement: {
    prototype: HTMLShadowDomArrayRootElement;
    new (): HTMLShadowDomArrayRootElement;
  };

  interface HTMLShadowDomArrayElement extends ShadowDomArray, HTMLStencilElement {}
  var HTMLShadowDomArrayElement: {
    prototype: HTMLShadowDomArrayElement;
    new (): HTMLShadowDomArrayElement;
  };

  interface HTMLShadowDomBasicRootElement extends ShadowDomBasicRoot, HTMLStencilElement {}
  var HTMLShadowDomBasicRootElement: {
    prototype: HTMLShadowDomBasicRootElement;
    new (): HTMLShadowDomBasicRootElement;
  };

  interface HTMLShadowDomBasicElement extends ShadowDomBasic, HTMLStencilElement {}
  var HTMLShadowDomBasicElement: {
    prototype: HTMLShadowDomBasicElement;
    new (): HTMLShadowDomBasicElement;
  };

  interface HTMLShadowDomSlotBasicElement extends ShadowDomSlotBasic, HTMLStencilElement {}
  var HTMLShadowDomSlotBasicElement: {
    prototype: HTMLShadowDomSlotBasicElement;
    new (): HTMLShadowDomSlotBasicElement;
  };

  interface HTMLShadowDomSlotNestedRootElement extends ShadowDomSlotNestedRoot, HTMLStencilElement {}
  var HTMLShadowDomSlotNestedRootElement: {
    prototype: HTMLShadowDomSlotNestedRootElement;
    new (): HTMLShadowDomSlotNestedRootElement;
  };

  interface HTMLShadowDomSlotNestedElement extends ShadowDomSlotNested, HTMLStencilElement {}
  var HTMLShadowDomSlotNestedElement: {
    prototype: HTMLShadowDomSlotNestedElement;
    new (): HTMLShadowDomSlotNestedElement;
  };

  interface HTMLSlotArrayBasicElement extends SlotArrayBasic, HTMLStencilElement {}
  var HTMLSlotArrayBasicElement: {
    prototype: HTMLSlotArrayBasicElement;
    new (): HTMLSlotArrayBasicElement;
  };

  interface HTMLSlotArrayComplexRootElement extends SlotArrayComplexRoot, HTMLStencilElement {}
  var HTMLSlotArrayComplexRootElement: {
    prototype: HTMLSlotArrayComplexRootElement;
    new (): HTMLSlotArrayComplexRootElement;
  };

  interface HTMLSlotArrayComplexElement extends SlotArrayComplex, HTMLStencilElement {}
  var HTMLSlotArrayComplexElement: {
    prototype: HTMLSlotArrayComplexElement;
    new (): HTMLSlotArrayComplexElement;
  };

  interface HTMLSlotArrayTopElement extends SlotArrayTop, HTMLStencilElement {}
  var HTMLSlotArrayTopElement: {
    prototype: HTMLSlotArrayTopElement;
    new (): HTMLSlotArrayTopElement;
  };

  interface HTMLSlotBasicOrderRootElement extends SlotBasicOrderRoot, HTMLStencilElement {}
  var HTMLSlotBasicOrderRootElement: {
    prototype: HTMLSlotBasicOrderRootElement;
    new (): HTMLSlotBasicOrderRootElement;
  };

  interface HTMLSlotBasicOrderElement extends SlotBasicOrder, HTMLStencilElement {}
  var HTMLSlotBasicOrderElement: {
    prototype: HTMLSlotBasicOrderElement;
    new (): HTMLSlotBasicOrderElement;
  };

  interface HTMLSlotBasicRootElement extends SlotBasicRoot, HTMLStencilElement {}
  var HTMLSlotBasicRootElement: {
    prototype: HTMLSlotBasicRootElement;
    new (): HTMLSlotBasicRootElement;
  };

  interface HTMLSlotBasicElement extends SlotBasic, HTMLStencilElement {}
  var HTMLSlotBasicElement: {
    prototype: HTMLSlotBasicElement;
    new (): HTMLSlotBasicElement;
  };

  interface HTMLSlotDynamicWrapperRootElement extends SlotDynamicWrapperRoot, HTMLStencilElement {}
  var HTMLSlotDynamicWrapperRootElement: {
    prototype: HTMLSlotDynamicWrapperRootElement;
    new (): HTMLSlotDynamicWrapperRootElement;
  };

  interface HTMLSlotDynamicWrapperElement extends SlotDynamicWrapper, HTMLStencilElement {}
  var HTMLSlotDynamicWrapperElement: {
    prototype: HTMLSlotDynamicWrapperElement;
    new (): HTMLSlotDynamicWrapperElement;
  };

  interface HTMLSlotFallbackRootElement extends SlotFallbackRoot, HTMLStencilElement {}
  var HTMLSlotFallbackRootElement: {
    prototype: HTMLSlotFallbackRootElement;
    new (): HTMLSlotFallbackRootElement;
  };

  interface HTMLSlotFallbackElement extends SlotFallback, HTMLStencilElement {}
  var HTMLSlotFallbackElement: {
    prototype: HTMLSlotFallbackElement;
    new (): HTMLSlotFallbackElement;
  };

  interface HTMLSlotHtmlElement extends SlotHtml, HTMLStencilElement {}
  var HTMLSlotHtmlElement: {
    prototype: HTMLSlotHtmlElement;
    new (): HTMLSlotHtmlElement;
  };

  interface HTMLSlotLightDomRootElement extends SlotLightDomRoot, HTMLStencilElement {}
  var HTMLSlotLightDomRootElement: {
    prototype: HTMLSlotLightDomRootElement;
    new (): HTMLSlotLightDomRootElement;
  };

  interface HTMLSlotLightDomContentElement extends SlotLightDomContent, HTMLStencilElement {}
  var HTMLSlotLightDomContentElement: {
    prototype: HTMLSlotLightDomContentElement;
    new (): HTMLSlotLightDomContentElement;
  };

  interface HTMLSlotMapOrderRootElement extends SlotMapOrderRoot, HTMLStencilElement {}
  var HTMLSlotMapOrderRootElement: {
    prototype: HTMLSlotMapOrderRootElement;
    new (): HTMLSlotMapOrderRootElement;
  };

  interface HTMLSlotMapOrderElement extends SlotMapOrder, HTMLStencilElement {}
  var HTMLSlotMapOrderElement: {
    prototype: HTMLSlotMapOrderElement;
    new (): HTMLSlotMapOrderElement;
  };

  interface HTMLSlotReorderRootElement extends SlotReorderRoot, HTMLStencilElement {}
  var HTMLSlotReorderRootElement: {
    prototype: HTMLSlotReorderRootElement;
    new (): HTMLSlotReorderRootElement;
  };

  interface HTMLSlotReorderElement extends SlotReorder, HTMLStencilElement {}
  var HTMLSlotReorderElement: {
    prototype: HTMLSlotReorderElement;
    new (): HTMLSlotReorderElement;
  };

  interface HTMLSlotReplaceWrapperRootElement extends SlotReplaceWrapperRoot, HTMLStencilElement {}
  var HTMLSlotReplaceWrapperRootElement: {
    prototype: HTMLSlotReplaceWrapperRootElement;
    new (): HTMLSlotReplaceWrapperRootElement;
  };

  interface HTMLSlotReplaceWrapperElement extends SlotReplaceWrapper, HTMLStencilElement {}
  var HTMLSlotReplaceWrapperElement: {
    prototype: HTMLSlotReplaceWrapperElement;
    new (): HTMLSlotReplaceWrapperElement;
  };

  interface HTMLCssCmpElement extends CssCmp, HTMLStencilElement {}
  var HTMLCssCmpElement: {
    prototype: HTMLCssCmpElement;
    new (): HTMLCssCmpElement;
  };

  interface HTMLSassCmpElement extends SassCmp, HTMLStencilElement {}
  var HTMLSassCmpElement: {
    prototype: HTMLSassCmpElement;
    new (): HTMLSassCmpElement;
  };

  interface HTMLSvgAttrElement extends SvgAttr, HTMLStencilElement {}
  var HTMLSvgAttrElement: {
    prototype: HTMLSvgAttrElement;
    new (): HTMLSvgAttrElement;
  };

  interface HTMLSvgClassElement extends SvgClass, HTMLStencilElement {}
  var HTMLSvgClassElement: {
    prototype: HTMLSvgClassElement;
    new (): HTMLSvgClassElement;
  };

  interface HTMLTag3dComponentElement extends Tag3dComponent, HTMLStencilElement {}
  var HTMLTag3dComponentElement: {
    prototype: HTMLTag3dComponentElement;
    new (): HTMLTag3dComponentElement;
  };

  interface HTMLTag88Element extends Tag88, HTMLStencilElement {}
  var HTMLTag88Element: {
    prototype: HTMLTag88Element;
    new (): HTMLTag88Element;
  };

  interface HTMLElementTagNameMap {
    'attribute-basic-root': HTMLAttributeBasicRootElement
    'attribute-basic': HTMLAttributeBasicElement
    'attribute-boolean-root': HTMLAttributeBooleanRootElement
    'attribute-boolean': HTMLAttributeBooleanElement
    'attribute-complex': HTMLAttributeComplexElement
    'attribute-host': HTMLAttributeHostElement
    'conditional-basic': HTMLConditionalBasicElement
    'conditional-rerender-root': HTMLConditionalRerenderRootElement
    'conditional-rerender': HTMLConditionalRerenderElement
    'css-variables-root': HTMLCssVariablesRootElement
    'css-variables': HTMLCssVariablesElement
    'dynamic-import': HTMLDynamicImportElement
    'esm-import': HTMLEsmImportElement
    'init-css-root': HTMLInitCssRootElement
    'key-reorder-root': HTMLKeyReorderRootElement
    'key-reorder': HTMLKeyReorderElement
    'lifecycle-basic-a': HTMLLifecycleBasicAElement
    'lifecycle-basic-b': HTMLLifecycleBasicBElement
    'lifecycle-basic-c': HTMLLifecycleBasicCElement
    'lifecycle-unload-a': HTMLLifecycleUnloadAElement
    'lifecycle-unload-b': HTMLLifecycleUnloadBElement
    'lifecycle-unload-root': HTMLLifecycleUnloadRootElement
    'reflect-to-attr': HTMLReflectToAttrElement
    'shadow-dom-array-root': HTMLShadowDomArrayRootElement
    'shadow-dom-array': HTMLShadowDomArrayElement
    'shadow-dom-basic-root': HTMLShadowDomBasicRootElement
    'shadow-dom-basic': HTMLShadowDomBasicElement
    'shadow-dom-slot-basic': HTMLShadowDomSlotBasicElement
    'shadow-dom-slot-nested-root': HTMLShadowDomSlotNestedRootElement
    'shadow-dom-slot-nested': HTMLShadowDomSlotNestedElement
    'slot-array-basic': HTMLSlotArrayBasicElement
    'slot-array-complex-root': HTMLSlotArrayComplexRootElement
    'slot-array-complex': HTMLSlotArrayComplexElement
    'slot-array-top': HTMLSlotArrayTopElement
    'slot-basic-order-root': HTMLSlotBasicOrderRootElement
    'slot-basic-order': HTMLSlotBasicOrderElement
    'slot-basic-root': HTMLSlotBasicRootElement
    'slot-basic': HTMLSlotBasicElement
    'slot-dynamic-wrapper-root': HTMLSlotDynamicWrapperRootElement
    'slot-dynamic-wrapper': HTMLSlotDynamicWrapperElement
    'slot-fallback-root': HTMLSlotFallbackRootElement
    'slot-fallback': HTMLSlotFallbackElement
    'slot-html': HTMLSlotHtmlElement
    'slot-light-dom-root': HTMLSlotLightDomRootElement
    'slot-light-dom-content': HTMLSlotLightDomContentElement
    'slot-map-order-root': HTMLSlotMapOrderRootElement
    'slot-map-order': HTMLSlotMapOrderElement
    'slot-reorder-root': HTMLSlotReorderRootElement
    'slot-reorder': HTMLSlotReorderElement
    'slot-replace-wrapper-root': HTMLSlotReplaceWrapperRootElement
    'slot-replace-wrapper': HTMLSlotReplaceWrapperElement
    'css-cmp': HTMLCssCmpElement
    'sass-cmp': HTMLSassCmpElement
    'svg-attr': HTMLSvgAttrElement
    'svg-class': HTMLSvgClassElement
    'tag-3d-component': HTMLTag3dComponentElement
    'tag-88': HTMLTag88Element
  }

  interface ElementTagNameMap {
    'attribute-basic-root': HTMLAttributeBasicRootElement;
    'attribute-basic': HTMLAttributeBasicElement;
    'attribute-boolean-root': HTMLAttributeBooleanRootElement;
    'attribute-boolean': HTMLAttributeBooleanElement;
    'attribute-complex': HTMLAttributeComplexElement;
    'attribute-host': HTMLAttributeHostElement;
    'conditional-basic': HTMLConditionalBasicElement;
    'conditional-rerender-root': HTMLConditionalRerenderRootElement;
    'conditional-rerender': HTMLConditionalRerenderElement;
    'css-variables-root': HTMLCssVariablesRootElement;
    'css-variables': HTMLCssVariablesElement;
    'dynamic-import': HTMLDynamicImportElement;
    'esm-import': HTMLEsmImportElement;
    'init-css-root': HTMLInitCssRootElement;
    'key-reorder-root': HTMLKeyReorderRootElement;
    'key-reorder': HTMLKeyReorderElement;
    'lifecycle-basic-a': HTMLLifecycleBasicAElement;
    'lifecycle-basic-b': HTMLLifecycleBasicBElement;
    'lifecycle-basic-c': HTMLLifecycleBasicCElement;
    'lifecycle-unload-a': HTMLLifecycleUnloadAElement;
    'lifecycle-unload-b': HTMLLifecycleUnloadBElement;
    'lifecycle-unload-root': HTMLLifecycleUnloadRootElement;
    'reflect-to-attr': HTMLReflectToAttrElement;
    'shadow-dom-array-root': HTMLShadowDomArrayRootElement;
    'shadow-dom-array': HTMLShadowDomArrayElement;
    'shadow-dom-basic-root': HTMLShadowDomBasicRootElement;
    'shadow-dom-basic': HTMLShadowDomBasicElement;
    'shadow-dom-slot-basic': HTMLShadowDomSlotBasicElement;
    'shadow-dom-slot-nested-root': HTMLShadowDomSlotNestedRootElement;
    'shadow-dom-slot-nested': HTMLShadowDomSlotNestedElement;
    'slot-array-basic': HTMLSlotArrayBasicElement;
    'slot-array-complex-root': HTMLSlotArrayComplexRootElement;
    'slot-array-complex': HTMLSlotArrayComplexElement;
    'slot-array-top': HTMLSlotArrayTopElement;
    'slot-basic-order-root': HTMLSlotBasicOrderRootElement;
    'slot-basic-order': HTMLSlotBasicOrderElement;
    'slot-basic-root': HTMLSlotBasicRootElement;
    'slot-basic': HTMLSlotBasicElement;
    'slot-dynamic-wrapper-root': HTMLSlotDynamicWrapperRootElement;
    'slot-dynamic-wrapper': HTMLSlotDynamicWrapperElement;
    'slot-fallback-root': HTMLSlotFallbackRootElement;
    'slot-fallback': HTMLSlotFallbackElement;
    'slot-html': HTMLSlotHtmlElement;
    'slot-light-dom-root': HTMLSlotLightDomRootElement;
    'slot-light-dom-content': HTMLSlotLightDomContentElement;
    'slot-map-order-root': HTMLSlotMapOrderRootElement;
    'slot-map-order': HTMLSlotMapOrderElement;
    'slot-reorder-root': HTMLSlotReorderRootElement;
    'slot-reorder': HTMLSlotReorderElement;
    'slot-replace-wrapper-root': HTMLSlotReplaceWrapperRootElement;
    'slot-replace-wrapper': HTMLSlotReplaceWrapperElement;
    'css-cmp': HTMLCssCmpElement;
    'sass-cmp': HTMLSassCmpElement;
    'svg-attr': HTMLSvgAttrElement;
    'svg-class': HTMLSvgClassElement;
    'tag-3d-component': HTMLTag3dComponentElement;
    'tag-88': HTMLTag88Element;
  }
}


import { DefaultIntrinsicElements } from '@stencil/core';

declare global {
  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends LocalIntrinsicElements, DefaultIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends JSXElements.HTMLAttributes {}
}

export declare function defineCustomElements(window: any): void;